---
# Notes:
# Sample project C code is not presently written to produce a release artifact.
# As such, release build options are disabled.
# This sample, therefore, only demonstrates running a collection of unit tests.

:project:
  :use_exceptions: FALSE
  :use_test_preprocessor: TRUE
  :use_auxiliary_dependencies: TRUE
  :build_root: build
  #  :release_build: TRUE
  :test_file_prefix: test_
  :which_ceedling: gem
  :ceedling_version: 0.31.1
  :default_tasks:
    - test:all

#:test_build:
#  :use_assembly: TRUE

# :release_build:
#  :output: test.out
#  :use_assembly: TRUE # Set to TRUE to include assembly files in the release build for startup code, etc.
#  :artifacts:
#     - test.map

:environment:

:extension:
  :executable: .out

:paths:
  :test:
    - +:test/**
    - -:test/support
  :source:
    - src/**
    - startup/**
    - ../driver/APM32F4xx_DAL_Driver/**
    - ../driver/CMSIS/Include/**
    - ../driver/Device/Geehy/APM32F4xx/**
    - include/**
  :support:
    - test/support
  :libraries: []

:defines:
  # in order to add common defines:
  #  1) remove the trailing [] from the :common: section
  #  2) add entries to the :common: section (e.g. :test: has TEST defined)
  :common: &common_defines []
  :test:
    - *common_defines
    - TEST
    - APM32F405xx
  :test_preprocess:
    - *common_defines
    - TEST

:cmock:
  :mock_prefix: mock_ # Set the prefix for mock objects
  # :treat_inlines: :include # Set to :include to treat inline functions as if they were in a separate file
  :when_no_prototypes: :warn # Set to :warn to print a warning when a function is called without a prototype
  :enforce_strict_ordering: TRUE # Set to TRUE to enforce strict ordering of expected calls
  :plugins:
    - :ignore # Allows ignoring functions from being mocked
    - :callback # Allows setting a callback function for a mock
    - :expect_any_args # Allows setting a mock to expect any arguments
    - :return_thru_ptr # Allows setting a mock to return a value through a pointer
  :treat_as:
    uint8:    HEX8
    uint16:   HEX16
    uint32:   UINT32
    int8:     INT8
    bool:     UINT8

# Add -gcov to the plugins list to make sure of the gcov plugin
# You will need to have gcov and gcovr both installed to make it work.
# For more information on these options, see docs in plugins/gcov
:gcov:
  :reports:
    - HtmlDetailed
  :gcovr:
    :html_medium_threshold: 75
    :html_high_threshold: 90
    :gcovr_flags: '-r . --html --html-details -o ./build/artifacts/gcov/GcovCoverageResults.html'

#:tools:
# Ceedling defaults to using gcc for compiling, linking, etc.
# As [:tools] is blank, gcc will be used (so long as it's in your system path)
# See documentation to configure a given toolchain for use

#:module_generator:
# Allows setting up the module generator paths
# Use ceedling module:create to create a new module
# :module_generator:
#   :project_root: ./
#   :source_root: src/
#   :inc_root: include/
#   :test_root: test/

# LIBRARIES
# These libraries are automatically injected into the build process. Those specified as
# common will be used in all types of builds. Otherwise, libraries can be injected in just
# tests or releases. These options are MERGED with the options in supplemental yaml files.
:libraries:
  :placement: :end
  :flag: "-l${1}"
  :path_flag: "-L ${1}"
  :system: []    # for example, you might list 'm' to grab the math library
  :test: []
  :release: []

:junit_tests_report:
  :artifact_filename: report_junit.xml # The name of the JUnit report file

:plugins:
  :load_paths:
    - "#{Ceedling.load_path}"
  :enabled:
    - stdout_pretty_tests_report
    - module_generator
    - gcov # Add this to the list of enabled plugins to generate a coverage report
    - xml_tests_report # Add this to the list of enabled plugins to generate an XML report for Ceedling Test Explorer
    - junit_tests_report # Add this to the list of enabled plugins to generate a JUnit report
...
